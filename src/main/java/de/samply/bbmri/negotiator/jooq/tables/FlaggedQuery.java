/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.FlaggedQueryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for queries that are flagged/bookmarked. bookmark options are starred, 
 * archived and ignored.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlaggedQuery extends TableImpl<FlaggedQueryRecord> {

	private static final long serialVersionUID = -1355570649;

	/**
	 * The reference instance of <code>public.flagged_query</code>
	 */
	public static final FlaggedQuery FLAGGED_QUERY = new FlaggedQuery();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FlaggedQueryRecord> getRecordType() {
		return FlaggedQueryRecord.class;
	}

	/**
	 * The column <code>public.flagged_query.query_id</code>. This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public final TableField<FlaggedQueryRecord, Integer> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table");

	/**
	 * The column <code>public.flagged_query.person_id</code>. This column along with the id column will make the primary key. Its also a foreign key here, taken from person table
	 */
	public final TableField<FlaggedQueryRecord, Integer> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with the id column will make the primary key. Its also a foreign key here, taken from person table");

	/**
	 * The column <code>public.flagged_query.flag</code>. The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred
	 */
	public final TableField<FlaggedQueryRecord, String> FLAG = createField("flag", org.jooq.impl.SQLDataType.CHAR.length(1), this, "The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred");

	/**
	 * Create a <code>public.flagged_query</code> table reference
	 */
	public FlaggedQuery() {
		this("flagged_query", null);
	}

	/**
	 * Create an aliased <code>public.flagged_query</code> table reference
	 */
	public FlaggedQuery(String alias) {
		this(alias, FLAGGED_QUERY);
	}

	private FlaggedQuery(String alias, Table<FlaggedQueryRecord> aliased) {
		this(alias, aliased, null);
	}

	private FlaggedQuery(String alias, Table<FlaggedQueryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for queries that are flagged/bookmarked. bookmark options are starred, archived and ignored.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<FlaggedQueryRecord> getPrimaryKey() {
		return Keys.FLAGGED_QUERY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<FlaggedQueryRecord>> getKeys() {
		return Arrays.<UniqueKey<FlaggedQueryRecord>>asList(Keys.FLAGGED_QUERY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<FlaggedQueryRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<FlaggedQueryRecord, ?>>asList(Keys.FLAGGED_QUERY__FLAGGED_QUERY_QUERY_ID_FKEY, Keys.FLAGGED_QUERY__FLAGGED_QUERY_PERSON_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedQuery as(String alias) {
		return new FlaggedQuery(alias, this);
	}

	/**
	 * Rename this table
	 */
	public FlaggedQuery rename(String name) {
		return new FlaggedQuery(name, null);
	}
}
