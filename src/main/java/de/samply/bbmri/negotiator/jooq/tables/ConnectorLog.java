/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.ConnectorLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * table to store the timestamp when the connector makes a get request for 
 * new queries
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectorLog extends TableImpl<ConnectorLogRecord> {

	private static final long serialVersionUID = -649438734;

	/**
	 * The reference instance of <code>public.connector_log</code>
	 */
	public static final ConnectorLog CONNECTOR_LOG = new ConnectorLog();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ConnectorLogRecord> getRecordType() {
		return ConnectorLogRecord.class;
	}

	/**
	 * The column <code>public.connector_log.id</code>. Primary key
	 */
	public final TableField<ConnectorLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "Primary key");

	/**
	 * The column <code>public.connector_log.last_query_time</code>. Timestamp when the request was made. 
	 */
	public final TableField<ConnectorLogRecord, Timestamp> LAST_QUERY_TIME = createField("last_query_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "Timestamp when the request was made. ");

	/**
	 * Create a <code>public.connector_log</code> table reference
	 */
	public ConnectorLog() {
		this("connector_log", null);
	}

	/**
	 * Create an aliased <code>public.connector_log</code> table reference
	 */
	public ConnectorLog(String alias) {
		this(alias, CONNECTOR_LOG);
	}

	private ConnectorLog(String alias, Table<ConnectorLogRecord> aliased) {
		this(alias, aliased, null);
	}

	private ConnectorLog(String alias, Table<ConnectorLogRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "table to store the timestamp when the connector makes a get request for new queries");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ConnectorLogRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CONNECTOR_LOG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ConnectorLogRecord> getPrimaryKey() {
		return Keys.CONNECTOR_LOG_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ConnectorLogRecord>> getKeys() {
		return Arrays.<UniqueKey<ConnectorLogRecord>>asList(Keys.CONNECTOR_LOG_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLog as(String alias) {
		return new ConnectorLog(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ConnectorLog rename(String name) {
		return new ConnectorLog(name, null);
	}
}
