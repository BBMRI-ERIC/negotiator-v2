/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.PersonCommentRecord;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonComment extends TableImpl<PersonCommentRecord> {

	private static final long serialVersionUID = 1138834833;

	/**
	 * The reference instance of <code>public.person_comment</code>
	 */
	public static final PersonComment PERSON_COMMENT = new PersonComment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PersonCommentRecord> getRecordType() {
		return PersonCommentRecord.class;
	}

	/**
	 * The column <code>public.person_comment.person_id</code>.
	 */
	public final TableField<PersonCommentRecord, Integer> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.person_comment.comment_id</code>.
	 */
	public final TableField<PersonCommentRecord, Integer> COMMENT_ID = createField("comment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.person_comment.read</code>.
	 */
	public final TableField<PersonCommentRecord, Boolean> READ = createField("read", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>public.person_comment.date_read</code>.
	 */
	public final TableField<PersonCommentRecord, Timestamp> DATE_READ = createField("date_read", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>public.person_comment</code> table reference
	 */
	public PersonComment() {
		this("person_comment", null);
	}

	/**
	 * Create an aliased <code>public.person_comment</code> table reference
	 */
	public PersonComment(String alias) {
		this(alias, PERSON_COMMENT);
	}

	private PersonComment(String alias, Table<PersonCommentRecord> aliased) {
		this(alias, aliased, null);
	}

	private PersonComment(String alias, Table<PersonCommentRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersonComment as(String alias) {
		return new PersonComment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PersonComment rename(String name) {
		return new PersonComment(name, null);
	}
}
