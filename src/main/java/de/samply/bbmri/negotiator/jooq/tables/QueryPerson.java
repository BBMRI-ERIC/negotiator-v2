/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.QueryPersonRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for the relationship between all the persons(owners) and the queries 
 * that they have replied to.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueryPerson extends TableImpl<QueryPersonRecord> {

	private static final long serialVersionUID = 2082484946;

	/**
	 * The reference instance of <code>public.query_person</code>
	 */
	public static final QueryPerson QUERY_PERSON = new QueryPerson();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<QueryPersonRecord> getRecordType() {
		return QueryPersonRecord.class;
	}

	/**
	 * The column <code>public.query_person.query_id</code>. This column along with person_Id will make the primary key. Its also a foreign key here, taken from query table
	 */
	public final TableField<QueryPersonRecord, Integer> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with person_Id will make the primary key. Its also a foreign key here, taken from query table");

	/**
	 * The column <code>public.query_person.person_id</code>. This column along with the query_id column will make the primary key. Its also a foreign key here, taken from "person" table
	 */
	public final TableField<QueryPersonRecord, Integer> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with the query_id column will make the primary key. Its also a foreign key here, taken from \"person\" table");

	/**
	 * The column <code>public.query_person.query_leaving_time</code>. The time when an owner leaves a query
	 */
	public final TableField<QueryPersonRecord, Timestamp> QUERY_LEAVING_TIME = createField("query_leaving_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "The time when an owner leaves a query");

	/**
	 * Create a <code>public.query_person</code> table reference
	 */
	public QueryPerson() {
		this("query_person", null);
	}

	/**
	 * Create an aliased <code>public.query_person</code> table reference
	 */
	public QueryPerson(String alias) {
		this(alias, QUERY_PERSON);
	}

	private QueryPerson(String alias, Table<QueryPersonRecord> aliased) {
		this(alias, aliased, null);
	}

	private QueryPerson(String alias, Table<QueryPersonRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for the relationship between all the persons(owners) and the queries that they have replied to.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<QueryPersonRecord> getPrimaryKey() {
		return Keys.QUERY_PERSON_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<QueryPersonRecord>> getKeys() {
		return Arrays.<UniqueKey<QueryPersonRecord>>asList(Keys.QUERY_PERSON_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<QueryPersonRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<QueryPersonRecord, ?>>asList(Keys.QUERY_PERSON__QUERY_PERSON_QUERY_ID_FKEY, Keys.QUERY_PERSON__QUERY_PERSON_PERSON_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QueryPerson as(String alias) {
		return new QueryPerson(alias, this);
	}

	/**
	 * Rename this table
	 */
	public QueryPerson rename(String name) {
		return new QueryPerson(name, null);
	}
}
