/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.Person;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * person table which is parent of researcher and owner
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonRecord extends UpdatableRecordImpl<PersonRecord> implements Record4<Integer, String, String, byte[]> {

	private static final long serialVersionUID = -654578721;

	/**
	 * Setter for <code>public.person.id</code>. primary key
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.person.id</code>. primary key
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.person.authData</code>. authentication string that comes from 'samply auth'
	 */
	public void setAuthdata(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.person.authData</code>. authentication string that comes from 'samply auth'
	 */
	public String getAuthdata() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.person.personType</code>. describes wether the person is researcher or owner - one of the the two child classes. 
	 */
	public void setPersontype(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.person.personType</code>. describes wether the person is researcher or owner - one of the the two child classes. 
	 */
	public String getPersontype() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>public.person.personImage</code>. image/avatar of the person
	 */
	public void setPersonimage(byte[] value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.person.personImage</code>. image/avatar of the person
	 */
	public byte[] getPersonimage() {
		return (byte[]) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, byte[]> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, byte[]> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Person.PERSON.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Person.PERSON.AUTHDATA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Person.PERSON.PERSONTYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field4() {
		return Person.PERSON.PERSONIMAGE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getAuthdata();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getPersontype();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value4() {
		return getPersonimage();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersonRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersonRecord value2(String value) {
		setAuthdata(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersonRecord value3(String value) {
		setPersontype(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersonRecord value4(byte[] value) {
		setPersonimage(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersonRecord values(Integer value1, String value2, String value3, byte[] value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PersonRecord
	 */
	public PersonRecord() {
		super(Person.PERSON);
	}

	/**
	 * Create a detached, initialised PersonRecord
	 */
	public PersonRecord(Integer id, String authdata, String persontype, byte[] personimage) {
		super(Person.PERSON);

		setValue(0, id);
		setValue(1, authdata);
		setValue(2, persontype);
		setValue(3, personimage);
	}
}
