/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.OfferRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * table to store private conversation made on a query between two people(owner 
 * and researcher)
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offer extends TableImpl<OfferRecord> {

	private static final long serialVersionUID = 1595985191;

	/**
	 * The reference instance of <code>public.offer</code>
	 */
	public static final Offer OFFER = new Offer();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<OfferRecord> getRecordType() {
		return OfferRecord.class;
	}

	/**
	 * The column <code>public.offer.id</code>. Primary key
	 */
	public final TableField<OfferRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "Primary key");

	/**
	 * The column <code>public.offer.query_id</code>. Foreign key which exists as primary key in the query table. 
	 */
	public final TableField<OfferRecord, Integer> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key which exists as primary key in the query table. ");

	/**
	 * The column <code>public.offer.person_id</code>. Foreign key which exists as primary key in the person table. describes the person who made the comment.
	 */
	public final TableField<OfferRecord, Integer> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key which exists as primary key in the person table. describes the person who made the comment.");

	/**
	 * The column <code>public.offer.biobank_in_private_chat</code>. Foreign key which exists as primary key in the person table. describes the owner of the samples who made the offer.
	 */
	public final TableField<OfferRecord, Integer> BIOBANK_IN_PRIVATE_CHAT = createField("biobank_in_private_chat", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key which exists as primary key in the person table. describes the owner of the samples who made the offer.");

	/**
	 * The column <code>public.offer.comment_time</code>. timestamp of when the comment was made on the offer.
	 */
	public final TableField<OfferRecord, Timestamp> COMMENT_TIME = createField("comment_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "timestamp of when the comment was made on the offer.");

	/**
	 * The column <code>public.offer.text</code>. Text of the comment.
	 */
	public final TableField<OfferRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Text of the comment.");

	/**
	 * The column <code>public.offer.status</code>.
	 */
	public final TableField<OfferRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.defaulted(true), this, "");

	/**
	 * The column <code>public.comment.moderated</code>.
	 */
	public final TableField<OfferRecord, Boolean> MODERATED = createField("moderated", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(false), this, "marks the offer as done by user with Moderator role");

	/**
	 * Create a <code>public.offer</code> table reference
	 */
	public Offer() {
		this("offer", null);
	}

	/**
	 * Create an aliased <code>public.offer</code> table reference
	 */
	public Offer(String alias) {
		this(alias, OFFER);
	}

	private Offer(String alias, Table<OfferRecord> aliased) {
		this(alias, aliased, null);
	}

	private Offer(String alias, Table<OfferRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "table to store private conversation made on a query between two people(owner and researcher)");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<OfferRecord, Integer> getIdentity() {
		return Keys.IDENTITY_OFFER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<OfferRecord> getPrimaryKey() {
		return Keys.OFFER_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<OfferRecord>> getKeys() {
		return Arrays.<UniqueKey<OfferRecord>>asList(Keys.OFFER_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<OfferRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<OfferRecord, ?>>asList(Keys.OFFER__OFFER_QUERY_ID_FKEY, Keys.OFFER__OFFER_PERSON_ID_FKEY, Keys.OFFER__OFFER_OFFER_FROM_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Offer as(String alias) {
		return new Offer(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Offer rename(String name) {
		return new Offer(name, null);
	}
}
