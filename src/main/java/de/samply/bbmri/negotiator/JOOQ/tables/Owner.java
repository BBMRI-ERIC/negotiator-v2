/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.JOOQ.tables;


import de.samply.bbmri.negotiator.JOOQ.Keys;
import de.samply.bbmri.negotiator.JOOQ.Public;
import de.samply.bbmri.negotiator.JOOQ.tables.records.OwnerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Owner table is one of the child of person table  
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Owner extends TableImpl<OwnerRecord> {

	private static final long serialVersionUID = -2013504937;

	/**
	 * The reference instance of <code>public.owner</code>
	 */
	public static final Owner OWNER = new Owner();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<OwnerRecord> getRecordType() {
		return OwnerRecord.class;
	}

	/**
	 * The column <code>public.owner.id</code>. This foreign key is the primary key of person table
	 */
	public final TableField<OwnerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "This foreign key is the primary key of person table");

	/**
	 * The column <code>public.owner.locationId</code>. This foreign key is the primary key of person table
	 */
	public final TableField<OwnerRecord, Integer> LOCATIONID = createField("locationId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "This foreign key is the primary key of person table");

	/**
	 * Create a <code>public.owner</code> table reference
	 */
	public Owner() {
		this("owner", null);
	}

	/**
	 * Create an aliased <code>public.owner</code> table reference
	 */
	public Owner(String alias) {
		this(alias, OWNER);
	}

	private Owner(String alias, Table<OwnerRecord> aliased) {
		this(alias, aliased, null);
	}

	private Owner(String alias, Table<OwnerRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Owner table is one of the child of person table  ");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<OwnerRecord, Integer> getIdentity() {
		return Keys.IDENTITY_OWNER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<OwnerRecord> getPrimaryKey() {
		return Keys.OWNER_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<OwnerRecord>> getKeys() {
		return Arrays.<UniqueKey<OwnerRecord>>asList(Keys.OWNER_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<OwnerRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<OwnerRecord, ?>>asList(Keys.OWNER__OWNER_ID_FKEY, Keys.OWNER__OWNER_LOCATIONID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Owner as(String alias) {
		return new Owner(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Owner rename(String name) {
		return new Owner(name, null);
	}
}
