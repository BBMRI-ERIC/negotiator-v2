/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.TaggedQueryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for queries that are tagged by names e.g. colonCancer,SkinCancer 
 * etc. Tag names need to be decided .
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaggedQuery extends TableImpl<TaggedQueryRecord> {

	private static final long serialVersionUID = 764459432;

	/**
	 * The reference instance of <code>public.tagged_query</code>
	 */
	public static final TaggedQuery TAGGED_QUERY = new TaggedQuery();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TaggedQueryRecord> getRecordType() {
		return TaggedQueryRecord.class;
	}

	/**
	 * The column <code>public.tagged_query.query_id</code>. This column along with tagId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public final TableField<TaggedQueryRecord, Integer> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with tagId will make the primary key. Its also a foreign key here, taken from query table");

	/**
	 * The column <code>public.tagged_query.tag_id</code>. This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from "tag" table
	 */
	public final TableField<TaggedQueryRecord, Integer> TAG_ID = createField("tag_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from \"tag\" table");

	/**
	 * Create a <code>public.tagged_query</code> table reference
	 */
	public TaggedQuery() {
		this("tagged_query", null);
	}

	/**
	 * Create an aliased <code>public.tagged_query</code> table reference
	 */
	public TaggedQuery(String alias) {
		this(alias, TAGGED_QUERY);
	}

	private TaggedQuery(String alias, Table<TaggedQueryRecord> aliased) {
		this(alias, aliased, null);
	}

	private TaggedQuery(String alias, Table<TaggedQueryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for queries that are tagged by names e.g. colonCancer,SkinCancer etc. Tag names need to be decided .");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TaggedQueryRecord> getPrimaryKey() {
		return Keys.TAGGED_QUERY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TaggedQueryRecord>> getKeys() {
		return Arrays.<UniqueKey<TaggedQueryRecord>>asList(Keys.TAGGED_QUERY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<TaggedQueryRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<TaggedQueryRecord, ?>>asList(Keys.TAGGED_QUERY__TAGGED_QUERY_QUERY_ID_FKEY, Keys.TAGGED_QUERY__TAGGED_QUERY_TAG_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedQuery as(String alias) {
		return new TaggedQuery(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TaggedQuery rename(String name) {
		return new TaggedQuery(name, null);
	}
}
