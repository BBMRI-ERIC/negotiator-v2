/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.FlaggedqueryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for queries that are flagged/bookmarked. bookmark options are starred, 
 * archived and ignored.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flaggedquery extends TableImpl<FlaggedqueryRecord> {

	private static final long serialVersionUID = -1040841110;

	/**
	 * The reference instance of <code>public.flaggedQuery</code>
	 */
	public static final Flaggedquery FLAGGEDQUERY = new Flaggedquery();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FlaggedqueryRecord> getRecordType() {
		return FlaggedqueryRecord.class;
	}

	/**
	 * The column <code>public.flaggedQuery.queryId</code>. This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public final TableField<FlaggedqueryRecord, Integer> QUERYID = createField("queryId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table");

	/**
	 * The column <code>public.flaggedQuery.personId</code>. This column along with the id column will make the primary key. Its also a foreign key here, taken from person table
	 */
	public final TableField<FlaggedqueryRecord, Integer> PERSONID = createField("personId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with the id column will make the primary key. Its also a foreign key here, taken from person table");

	/**
	 * The column <code>public.flaggedQuery.flag</code>. The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred
	 */
	public final TableField<FlaggedqueryRecord, String> FLAG = createField("flag", org.jooq.impl.SQLDataType.CHAR.length(1), this, "The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred");

	/**
	 * Create a <code>public.flaggedQuery</code> table reference
	 */
	public Flaggedquery() {
		this("flaggedQuery", null);
	}

	/**
	 * Create an aliased <code>public.flaggedQuery</code> table reference
	 */
	public Flaggedquery(String alias) {
		this(alias, FLAGGEDQUERY);
	}

	private Flaggedquery(String alias, Table<FlaggedqueryRecord> aliased) {
		this(alias, aliased, null);
	}

	private Flaggedquery(String alias, Table<FlaggedqueryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for queries that are flagged/bookmarked. bookmark options are starred, archived and ignored.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<FlaggedqueryRecord> getPrimaryKey() {
		return Keys.FLAGGEDQUERY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<FlaggedqueryRecord>> getKeys() {
		return Arrays.<UniqueKey<FlaggedqueryRecord>>asList(Keys.FLAGGEDQUERY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<FlaggedqueryRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<FlaggedqueryRecord, ?>>asList(Keys.FLAGGEDQUERY__FLAGGEDQUERY_QUERYID_FKEY, Keys.FLAGGEDQUERY__FLAGGEDQUERY_PERSONID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Flaggedquery as(String alias) {
		return new Flaggedquery(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Flaggedquery rename(String name) {
		return new Flaggedquery(name, null);
	}
}
