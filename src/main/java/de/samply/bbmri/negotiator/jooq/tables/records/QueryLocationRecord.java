/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.QueryLocation;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table for all the locations that have replied to a query.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueryLocationRecord extends UpdatableRecordImpl<QueryLocationRecord> implements Record2<Integer, Integer> {

	private static final long serialVersionUID = 1815064458;

	/**
	 * Setter for <code>public.query_location.query_id</code>. This column along with location_Id will make the primary key. Its also a foreign key here, taken from query table
	 */
	public void setQueryId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.query_location.query_id</code>. This column along with location_Id will make the primary key. Its also a foreign key here, taken from query table
	 */
	public Integer getQueryId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.query_location.location_id</code>. This column along with the query_id column will make the primary key. Its also a foreign key here, taken from "location" table
	 */
	public void setLocationId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.query_location.location_id</code>. This column along with the query_id column will make the primary key. Its also a foreign key here, taken from "location" table
	 */
	public Integer getLocationId() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return QueryLocation.QUERY_LOCATION.QUERY_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return QueryLocation.QUERY_LOCATION.LOCATION_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getQueryId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getLocationId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QueryLocationRecord value1(Integer value) {
		setQueryId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QueryLocationRecord value2(Integer value) {
		setLocationId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QueryLocationRecord values(Integer value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached QueryLocationRecord
	 */
	public QueryLocationRecord() {
		super(QueryLocation.QUERY_LOCATION);
	}

	/**
	 * Create a detached, initialised QueryLocationRecord
	 */
	public QueryLocationRecord(Integer queryId, Integer locationId) {
		super(QueryLocation.QUERY_LOCATION);

		setValue(0, queryId);
		setValue(1, locationId);
	}
}
