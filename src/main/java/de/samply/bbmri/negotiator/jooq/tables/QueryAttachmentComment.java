/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.QueryAttachmentCommentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for queries that have one or more attachments uploaded.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueryAttachmentComment extends TableImpl<QueryAttachmentCommentRecord> {

	private static final long serialVersionUID = 15423133;

	/**
	 * The reference instance of <code>public.query_attachment_comment</code>
	 */
	public static final QueryAttachmentComment QUERY_ATTACHMENT_COMMENT = new QueryAttachmentComment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<QueryAttachmentCommentRecord> getRecordType() {
		return QueryAttachmentCommentRecord.class;
	}

	/**
	 * The column <code>public.query_attachment_comment.id</code>.
	 */
	public final TableField<QueryAttachmentCommentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.query_attachment_comment.query_id</code>. This column is a foreign key here, taken from query table
	 */
	public final TableField<QueryAttachmentCommentRecord, Integer> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column is a foreign key here, taken from query table");

	/**
	 * The column <code>public.query_attachment_comment.attachment</code>. The name of the attached file stored in file system, not including the directory
	 */
	public final TableField<QueryAttachmentCommentRecord, String> ATTACHMENT = createField("attachment", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "The name of the attached file stored in file system, not including the directory");

	/**
	 * The column <code>public.query_attachment_comment.attachment_type</code>.
	 */
	public final TableField<QueryAttachmentCommentRecord, String> ATTACHMENT_TYPE = createField("attachment_type", org.jooq.impl.SQLDataType.VARCHAR.defaulted(true), this, "");

	/**
	 * The column <code>public.query_attachment_comment.comment_id</code>.
	 */
	public final TableField<QueryAttachmentCommentRecord, Integer> COMMENT_ID = createField("comment_id", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * Create a <code>public.query_attachment_comment</code> table reference
	 */
	public QueryAttachmentComment() {
		this("query_attachment_comment", null);
	}

	/**
	 * Create an aliased <code>public.query_attachment_comment</code> table reference
	 */
	public QueryAttachmentComment(String alias) {
		this(alias, QUERY_ATTACHMENT_COMMENT);
	}

	private QueryAttachmentComment(String alias, Table<QueryAttachmentCommentRecord> aliased) {
		this(alias, aliased, null);
	}

	private QueryAttachmentComment(String alias, Table<QueryAttachmentCommentRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for queries that have one or more attachments uploaded.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<QueryAttachmentCommentRecord, Integer> getIdentity() {
		return Keys.IDENTITY_QUERY_ATTACHMENT_COMMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<QueryAttachmentCommentRecord> getPrimaryKey() {
		return Keys.QUERY_ATTACHMENT_COMMENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<QueryAttachmentCommentRecord>> getKeys() {
		return Arrays.<UniqueKey<QueryAttachmentCommentRecord>>asList(Keys.QUERY_ATTACHMENT_COMMENT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<QueryAttachmentCommentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<QueryAttachmentCommentRecord, ?>>asList(Keys.QUERY_ATTACHMENT_COMMENT__QUERY_ATTACHMENT_COMMENT_QUERY_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QueryAttachmentComment as(String alias) {
		return new QueryAttachmentComment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public QueryAttachmentComment rename(String name) {
		return new QueryAttachmentComment(name, null);
	}
}
