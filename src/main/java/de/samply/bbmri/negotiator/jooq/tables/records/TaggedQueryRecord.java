/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.TaggedQuery;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table for queries that are tagged by names e.g. colonCancer,SkinCancer 
 * etc. Tag names need to be decided .
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaggedQueryRecord extends UpdatableRecordImpl<TaggedQueryRecord> implements Record2<Integer, Integer> {

	private static final long serialVersionUID = 192489707;

	/**
	 * Setter for <code>public.tagged_query.query_id</code>. This column along with tagId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public void setQueryId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.tagged_query.query_id</code>. This column along with tagId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public Integer getQueryId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.tagged_query.tag_id</code>. This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from "tag" table
	 */
	public void setTagId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.tagged_query.tag_id</code>. This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from "tag" table
	 */
	public Integer getTagId() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return TaggedQuery.TAGGED_QUERY.QUERY_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return TaggedQuery.TAGGED_QUERY.TAG_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getQueryId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getTagId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedQueryRecord value1(Integer value) {
		setQueryId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedQueryRecord value2(Integer value) {
		setTagId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedQueryRecord values(Integer value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TaggedQueryRecord
	 */
	public TaggedQueryRecord() {
		super(TaggedQuery.TAGGED_QUERY);
	}

	/**
	 * Create a detached, initialised TaggedQueryRecord
	 */
	public TaggedQueryRecord(Integer queryId, Integer tagId) {
		super(TaggedQuery.TAGGED_QUERY);

		setValue(0, queryId);
		setValue(1, tagId);
	}
}
