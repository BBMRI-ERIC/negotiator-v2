/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.JsonQueryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * query table to contain json text queries
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonQuery extends TableImpl<JsonQueryRecord> {

	private static final long serialVersionUID = 83169908;

	/**
	 * The reference instance of <code>public.json_query</code>
	 */
	public static final JsonQuery JSON_QUERY = new JsonQuery();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<JsonQueryRecord> getRecordType() {
		return JsonQueryRecord.class;
	}

	/**
	 * The column <code>public.json_query.id</code>. primary key
	 */
	public final TableField<JsonQueryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "primary key");

	/**
	 * The column <code>public.json_query.json_text</code>. text of query in json format
	 */
	public final TableField<JsonQueryRecord, String> JSON_TEXT = createField("json_text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "text of query in json format");

	/**
	 * Create a <code>public.json_query</code> table reference
	 */
	public JsonQuery() {
		this("json_query", null);
	}

	/**
	 * Create an aliased <code>public.json_query</code> table reference
	 */
	public JsonQuery(String alias) {
		this(alias, JSON_QUERY);
	}

	private JsonQuery(String alias, Table<JsonQueryRecord> aliased) {
		this(alias, aliased, null);
	}

	private JsonQuery(String alias, Table<JsonQueryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "query table to contain json text queries");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<JsonQueryRecord, Integer> getIdentity() {
		return Keys.IDENTITY_JSON_QUERY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<JsonQueryRecord> getPrimaryKey() {
		return Keys.JSON_QUERY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<JsonQueryRecord>> getKeys() {
		return Arrays.<UniqueKey<JsonQueryRecord>>asList(Keys.JSON_QUERY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JsonQuery as(String alias) {
		return new JsonQuery(alias, this);
	}

	/**
	 * Rename this table
	 */
	public JsonQuery rename(String name) {
		return new JsonQuery(name, null);
	}
}
