/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.Taggedquery;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table for queries that are tagged by names e.g. colonCancer,SkinCancer 
 * etc. Tag names need to be decided .
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaggedqueryRecord extends UpdatableRecordImpl<TaggedqueryRecord> implements Record2<Integer, Integer> {

	private static final long serialVersionUID = 1750078641;

	/**
	 * Setter for <code>public.taggedQuery.queryId</code>. This column along with tagId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public void setQueryid(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.taggedQuery.queryId</code>. This column along with tagId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public Integer getQueryid() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.taggedQuery.tagId</code>. This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from "tag" table
	 */
	public void setTagid(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.taggedQuery.tagId</code>. This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from "tag" table
	 */
	public Integer getTagid() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Taggedquery.TAGGEDQUERY.QUERYID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Taggedquery.TAGGEDQUERY.TAGID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getQueryid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getTagid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedqueryRecord value1(Integer value) {
		setQueryid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedqueryRecord value2(Integer value) {
		setTagid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaggedqueryRecord values(Integer value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TaggedqueryRecord
	 */
	public TaggedqueryRecord() {
		super(Taggedquery.TAGGEDQUERY);
	}

	/**
	 * Create a detached, initialised TaggedqueryRecord
	 */
	public TaggedqueryRecord(Integer queryid, Integer tagid) {
		super(Taggedquery.TAGGEDQUERY);

		setValue(0, queryid);
		setValue(1, tagid);
	}
}
