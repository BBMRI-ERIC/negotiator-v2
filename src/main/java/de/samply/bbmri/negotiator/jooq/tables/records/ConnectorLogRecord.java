/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.ConnectorLog;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * table to store the timestamp when the connector makes a get request for 
 * new queries
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectorLogRecord extends UpdatableRecordImpl<ConnectorLogRecord> implements Record3<Integer, String, Timestamp> {

	private static final long serialVersionUID = -277271366;

	/**
	 * Setter for <code>public.connector_log.id</code>. Primary key
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.connector_log.id</code>. Primary key
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.connector_log.directory_collection_id</code>. Foreign key that comes from table "Collections.directory_id". It is not the primary key of its table but it is still unique so we can use it as a foreign key constraint
	 */
	public void setDirectoryCollectionId(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.connector_log.directory_collection_id</code>. Foreign key that comes from table "Collections.directory_id". It is not the primary key of its table but it is still unique so we can use it as a foreign key constraint
	 */
	public String getDirectoryCollectionId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.connector_log.last_query_time</code>. Timestamp when the request was made. 
	 */
	public void setLastQueryTime(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.connector_log.last_query_time</code>. Timestamp when the request was made. 
	 */
	public Timestamp getLastQueryTime() {
		return (Timestamp) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, Timestamp> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, Timestamp> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ConnectorLog.CONNECTOR_LOG.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return ConnectorLog.CONNECTOR_LOG.DIRECTORY_COLLECTION_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return ConnectorLog.CONNECTOR_LOG.LAST_QUERY_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getDirectoryCollectionId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getLastQueryTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord value2(String value) {
		setDirectoryCollectionId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord value3(Timestamp value) {
		setLastQueryTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord values(Integer value1, String value2, Timestamp value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ConnectorLogRecord
	 */
	public ConnectorLogRecord() {
		super(ConnectorLog.CONNECTOR_LOG);
	}

	/**
	 * Create a detached, initialised ConnectorLogRecord
	 */
	public ConnectorLogRecord(Integer id, String directoryCollectionId, Timestamp lastQueryTime) {
		super(ConnectorLog.CONNECTOR_LOG);

		setValue(0, id);
		setValue(1, directoryCollectionId);
		setValue(2, lastQueryTime);
	}
}
