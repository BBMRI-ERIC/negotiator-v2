/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.QueryLocationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for all the locations that have replied to a query.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueryLocation extends TableImpl<QueryLocationRecord> {

	private static final long serialVersionUID = 761331030;

	/**
	 * The reference instance of <code>public.query_location</code>
	 */
	public static final QueryLocation QUERY_LOCATION = new QueryLocation();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<QueryLocationRecord> getRecordType() {
		return QueryLocationRecord.class;
	}

	/**
	 * The column <code>public.query_location.query_id</code>. This column along with location_Id will make the primary key. Its also a foreign key here, taken from query table
	 */
	public final TableField<QueryLocationRecord, Integer> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with location_Id will make the primary key. Its also a foreign key here, taken from query table");

	/**
	 * The column <code>public.query_location.location_id</code>. This column along with the query_id column will make the primary key. Its also a foreign key here, taken from "location" table
	 */
	public final TableField<QueryLocationRecord, Integer> LOCATION_ID = createField("location_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "This column along with the query_id column will make the primary key. Its also a foreign key here, taken from \"location\" table");

	/**
	 * Create a <code>public.query_location</code> table reference
	 */
	public QueryLocation() {
		this("query_location", null);
	}

	/**
	 * Create an aliased <code>public.query_location</code> table reference
	 */
	public QueryLocation(String alias) {
		this(alias, QUERY_LOCATION);
	}

	private QueryLocation(String alias, Table<QueryLocationRecord> aliased) {
		this(alias, aliased, null);
	}

	private QueryLocation(String alias, Table<QueryLocationRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for all the locations that have replied to a query.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<QueryLocationRecord> getPrimaryKey() {
		return Keys.QUERY_LOCATION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<QueryLocationRecord>> getKeys() {
		return Arrays.<UniqueKey<QueryLocationRecord>>asList(Keys.QUERY_LOCATION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<QueryLocationRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<QueryLocationRecord, ?>>asList(Keys.QUERY_LOCATION__QUERY_LOCATION_QUERY_ID_FKEY, Keys.QUERY_LOCATION__QUERY_LOCATION_LOCATION_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QueryLocation as(String alias) {
		return new QueryLocation(alias, this);
	}

	/**
	 * Rename this table
	 */
	public QueryLocation rename(String name) {
		return new QueryLocation(name, null);
	}
}
