/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.JOOQ;


import de.samply.bbmri.negotiator.JOOQ.tables.Comment;
import de.samply.bbmri.negotiator.JOOQ.tables.Flaggedquery;
import de.samply.bbmri.negotiator.JOOQ.tables.Location;
import de.samply.bbmri.negotiator.JOOQ.tables.Owner;
import de.samply.bbmri.negotiator.JOOQ.tables.Person;
import de.samply.bbmri.negotiator.JOOQ.tables.Query;
import de.samply.bbmri.negotiator.JOOQ.tables.Researcher;
import de.samply.bbmri.negotiator.JOOQ.tables.Tag;
import de.samply.bbmri.negotiator.JOOQ.tables.Taggedquery;
import de.samply.bbmri.negotiator.JOOQ.tables.records.CommentRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.FlaggedqueryRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.LocationRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.OwnerRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.PersonRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.QueryRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.ResearcherRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.TagRecord;
import de.samply.bbmri.negotiator.JOOQ.tables.records.TaggedqueryRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<CommentRecord, Integer> IDENTITY_COMMENT = Identities0.IDENTITY_COMMENT;
	public static final Identity<FlaggedqueryRecord, Integer> IDENTITY_FLAGGEDQUERY = Identities0.IDENTITY_FLAGGEDQUERY;
	public static final Identity<LocationRecord, Integer> IDENTITY_LOCATION = Identities0.IDENTITY_LOCATION;
	public static final Identity<OwnerRecord, Integer> IDENTITY_OWNER = Identities0.IDENTITY_OWNER;
	public static final Identity<PersonRecord, Integer> IDENTITY_PERSON = Identities0.IDENTITY_PERSON;
	public static final Identity<QueryRecord, Integer> IDENTITY_QUERY = Identities0.IDENTITY_QUERY;
	public static final Identity<ResearcherRecord, Integer> IDENTITY_RESEARCHER = Identities0.IDENTITY_RESEARCHER;
	public static final Identity<TagRecord, Integer> IDENTITY_TAG = Identities0.IDENTITY_TAG;
	public static final Identity<TaggedqueryRecord, Integer> IDENTITY_TAGGEDQUERY = Identities0.IDENTITY_TAGGEDQUERY;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<CommentRecord> COMMENT_PKEY = UniqueKeys0.COMMENT_PKEY;
	public static final UniqueKey<FlaggedqueryRecord> FLAGGEDQUERY_PKEY = UniqueKeys0.FLAGGEDQUERY_PKEY;
	public static final UniqueKey<LocationRecord> LOCATION_PKEY = UniqueKeys0.LOCATION_PKEY;
	public static final UniqueKey<OwnerRecord> OWNER_PKEY = UniqueKeys0.OWNER_PKEY;
	public static final UniqueKey<PersonRecord> PERSON_PKEY = UniqueKeys0.PERSON_PKEY;
	public static final UniqueKey<QueryRecord> QUERY_PKEY = UniqueKeys0.QUERY_PKEY;
	public static final UniqueKey<QueryRecord> QUERY_RESEARCHERID_KEY = UniqueKeys0.QUERY_RESEARCHERID_KEY;
	public static final UniqueKey<ResearcherRecord> RESEARCHER_PKEY = UniqueKeys0.RESEARCHER_PKEY;
	public static final UniqueKey<TagRecord> TAG_PKEY = UniqueKeys0.TAG_PKEY;
	public static final UniqueKey<TaggedqueryRecord> TAGGEDQUERY_PKEY = UniqueKeys0.TAGGEDQUERY_PKEY;
	public static final UniqueKey<TaggedqueryRecord> TAGGEDQUERY_QUERYID_KEY = UniqueKeys0.TAGGEDQUERY_QUERYID_KEY;
	public static final UniqueKey<TaggedqueryRecord> TAGGEDQUERY_TAGID_KEY = UniqueKeys0.TAGGEDQUERY_TAGID_KEY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<CommentRecord, QueryRecord> COMMENT__COMMENT_QUERYID_FKEY = ForeignKeys0.COMMENT__COMMENT_QUERYID_FKEY;
	public static final ForeignKey<CommentRecord, PersonRecord> COMMENT__COMMENT_PERSONID_FKEY = ForeignKeys0.COMMENT__COMMENT_PERSONID_FKEY;
	public static final ForeignKey<FlaggedqueryRecord, QueryRecord> FLAGGEDQUERY__FLAGGEDQUERY_QUERYID_FKEY = ForeignKeys0.FLAGGEDQUERY__FLAGGEDQUERY_QUERYID_FKEY;
	public static final ForeignKey<FlaggedqueryRecord, OwnerRecord> FLAGGEDQUERY__FLAGGEDQUERY_OWNERID_FKEY = ForeignKeys0.FLAGGEDQUERY__FLAGGEDQUERY_OWNERID_FKEY;
	public static final ForeignKey<OwnerRecord, PersonRecord> OWNER__OWNER_ID_FKEY = ForeignKeys0.OWNER__OWNER_ID_FKEY;
	public static final ForeignKey<OwnerRecord, LocationRecord> OWNER__OWNER_LOCATIONID_FKEY = ForeignKeys0.OWNER__OWNER_LOCATIONID_FKEY;
	public static final ForeignKey<QueryRecord, ResearcherRecord> QUERY__QUERY_RESEARCHERID_FKEY = ForeignKeys0.QUERY__QUERY_RESEARCHERID_FKEY;
	public static final ForeignKey<ResearcherRecord, PersonRecord> RESEARCHER__RESEARCHER_ID_FKEY = ForeignKeys0.RESEARCHER__RESEARCHER_ID_FKEY;
	public static final ForeignKey<TagRecord, QueryRecord> TAG__TAG_QUERYID_FKEY = ForeignKeys0.TAG__TAG_QUERYID_FKEY;
	public static final ForeignKey<TaggedqueryRecord, QueryRecord> TAGGEDQUERY__TAGGEDQUERY_QUERYID_FKEY = ForeignKeys0.TAGGEDQUERY__TAGGEDQUERY_QUERYID_FKEY;
	public static final ForeignKey<TaggedqueryRecord, TagRecord> TAGGEDQUERY__TAGGEDQUERY_TAGID_FKEY = ForeignKeys0.TAGGEDQUERY__TAGGEDQUERY_TAGID_FKEY;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<CommentRecord, Integer> IDENTITY_COMMENT = createIdentity(Comment.COMMENT, Comment.COMMENT.ID);
		public static Identity<FlaggedqueryRecord, Integer> IDENTITY_FLAGGEDQUERY = createIdentity(Flaggedquery.FLAGGEDQUERY, Flaggedquery.FLAGGEDQUERY.QUERYID);
		public static Identity<LocationRecord, Integer> IDENTITY_LOCATION = createIdentity(Location.LOCATION, Location.LOCATION.ID);
		public static Identity<OwnerRecord, Integer> IDENTITY_OWNER = createIdentity(Owner.OWNER, Owner.OWNER.ID);
		public static Identity<PersonRecord, Integer> IDENTITY_PERSON = createIdentity(Person.PERSON, Person.PERSON.ID);
		public static Identity<QueryRecord, Integer> IDENTITY_QUERY = createIdentity(Query.QUERY, Query.QUERY.ID);
		public static Identity<ResearcherRecord, Integer> IDENTITY_RESEARCHER = createIdentity(Researcher.RESEARCHER, Researcher.RESEARCHER.ID);
		public static Identity<TagRecord, Integer> IDENTITY_TAG = createIdentity(Tag.TAG, Tag.TAG.ID);
		public static Identity<TaggedqueryRecord, Integer> IDENTITY_TAGGEDQUERY = createIdentity(Taggedquery.TAGGEDQUERY, Taggedquery.TAGGEDQUERY.QUERYID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<CommentRecord> COMMENT_PKEY = createUniqueKey(Comment.COMMENT, Comment.COMMENT.ID);
		public static final UniqueKey<FlaggedqueryRecord> FLAGGEDQUERY_PKEY = createUniqueKey(Flaggedquery.FLAGGEDQUERY, Flaggedquery.FLAGGEDQUERY.QUERYID, Flaggedquery.FLAGGEDQUERY.OWNERID);
		public static final UniqueKey<LocationRecord> LOCATION_PKEY = createUniqueKey(Location.LOCATION, Location.LOCATION.ID);
		public static final UniqueKey<OwnerRecord> OWNER_PKEY = createUniqueKey(Owner.OWNER, Owner.OWNER.ID);
		public static final UniqueKey<PersonRecord> PERSON_PKEY = createUniqueKey(Person.PERSON, Person.PERSON.ID);
		public static final UniqueKey<QueryRecord> QUERY_PKEY = createUniqueKey(Query.QUERY, Query.QUERY.ID);
		public static final UniqueKey<QueryRecord> QUERY_RESEARCHERID_KEY = createUniqueKey(Query.QUERY, Query.QUERY.RESEARCHERID);
		public static final UniqueKey<ResearcherRecord> RESEARCHER_PKEY = createUniqueKey(Researcher.RESEARCHER, Researcher.RESEARCHER.ID);
		public static final UniqueKey<TagRecord> TAG_PKEY = createUniqueKey(Tag.TAG, Tag.TAG.ID);
		public static final UniqueKey<TaggedqueryRecord> TAGGEDQUERY_PKEY = createUniqueKey(Taggedquery.TAGGEDQUERY, Taggedquery.TAGGEDQUERY.QUERYID, Taggedquery.TAGGEDQUERY.TAGID);
		public static final UniqueKey<TaggedqueryRecord> TAGGEDQUERY_QUERYID_KEY = createUniqueKey(Taggedquery.TAGGEDQUERY, Taggedquery.TAGGEDQUERY.QUERYID);
		public static final UniqueKey<TaggedqueryRecord> TAGGEDQUERY_TAGID_KEY = createUniqueKey(Taggedquery.TAGGEDQUERY, Taggedquery.TAGGEDQUERY.TAGID);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<CommentRecord, QueryRecord> COMMENT__COMMENT_QUERYID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.QUERY_PKEY, Comment.COMMENT, Comment.COMMENT.QUERYID);
		public static final ForeignKey<CommentRecord, PersonRecord> COMMENT__COMMENT_PERSONID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.PERSON_PKEY, Comment.COMMENT, Comment.COMMENT.PERSONID);
		public static final ForeignKey<FlaggedqueryRecord, QueryRecord> FLAGGEDQUERY__FLAGGEDQUERY_QUERYID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.QUERY_PKEY, Flaggedquery.FLAGGEDQUERY, Flaggedquery.FLAGGEDQUERY.QUERYID);
		public static final ForeignKey<FlaggedqueryRecord, OwnerRecord> FLAGGEDQUERY__FLAGGEDQUERY_OWNERID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.OWNER_PKEY, Flaggedquery.FLAGGEDQUERY, Flaggedquery.FLAGGEDQUERY.OWNERID);
		public static final ForeignKey<OwnerRecord, PersonRecord> OWNER__OWNER_ID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.PERSON_PKEY, Owner.OWNER, Owner.OWNER.ID);
		public static final ForeignKey<OwnerRecord, LocationRecord> OWNER__OWNER_LOCATIONID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.LOCATION_PKEY, Owner.OWNER, Owner.OWNER.LOCATIONID);
		public static final ForeignKey<QueryRecord, ResearcherRecord> QUERY__QUERY_RESEARCHERID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.RESEARCHER_PKEY, Query.QUERY, Query.QUERY.RESEARCHERID);
		public static final ForeignKey<ResearcherRecord, PersonRecord> RESEARCHER__RESEARCHER_ID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.PERSON_PKEY, Researcher.RESEARCHER, Researcher.RESEARCHER.ID);
		public static final ForeignKey<TagRecord, QueryRecord> TAG__TAG_QUERYID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.QUERY_PKEY, Tag.TAG, Tag.TAG.QUERYID);
		public static final ForeignKey<TaggedqueryRecord, QueryRecord> TAGGEDQUERY__TAGGEDQUERY_QUERYID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.QUERY_PKEY, Taggedquery.TAGGEDQUERY, Taggedquery.TAGGEDQUERY.QUERYID);
		public static final ForeignKey<TaggedqueryRecord, TagRecord> TAGGEDQUERY__TAGGEDQUERY_TAGID_FKEY = createForeignKey(de.samply.bbmri.negotiator.JOOQ.Keys.TAG_PKEY, Taggedquery.TAGGEDQUERY, Taggedquery.TAGGEDQUERY.TAGID);
	}
}
