/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.ConnectorLog;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * table to store the timestamp when the connector makes a get request for 
 * new queries
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectorLogRecord extends UpdatableRecordImpl<ConnectorLogRecord> implements Record2<Integer, Timestamp> {

	private static final long serialVersionUID = 676521472;

	/**
	 * Setter for <code>public.connector_log.id</code>. Primary key
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.connector_log.id</code>. Primary key
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.connector_log.last_query_time</code>. Timestamp when the request was made. 
	 */
	public void setLastQueryTime(Timestamp value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.connector_log.last_query_time</code>. Timestamp when the request was made. 
	 */
	public Timestamp getLastQueryTime() {
		return (Timestamp) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Timestamp> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Timestamp> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ConnectorLog.CONNECTOR_LOG.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field2() {
		return ConnectorLog.CONNECTOR_LOG.LAST_QUERY_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value2() {
		return getLastQueryTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord value2(Timestamp value) {
		setLastQueryTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorLogRecord values(Integer value1, Timestamp value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ConnectorLogRecord
	 */
	public ConnectorLogRecord() {
		super(ConnectorLog.CONNECTOR_LOG);
	}

	/**
	 * Create a detached, initialised ConnectorLogRecord
	 */
	public ConnectorLogRecord(Integer id, Timestamp lastQueryTime) {
		super(ConnectorLog.CONNECTOR_LOG);

		setValue(0, id);
		setValue(1, lastQueryTime);
	}
}
