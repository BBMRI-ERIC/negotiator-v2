/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.enums.RoleType;
import de.samply.bbmri.negotiator.jooq.tables.Role;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table for different roles of a user.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleRecord extends UpdatableRecordImpl<RoleRecord> implements Record2<RoleType, Integer> {

	private static final long serialVersionUID = 2073174708;

	/**
	 * Setter for <code>public.role.role_type</code>. This column along with the person_id column will make the primary key. It describes the role a user can have. A user can have more than one role
	 */
	public void setRoleType(RoleType value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.role.role_type</code>. This column along with the person_id column will make the primary key. It describes the role a user can have. A user can have more than one role
	 */
	public RoleType getRoleType() {
		return (RoleType) getValue(0);
	}

	/**
	 * Setter for <code>public.role.person_id</code>. This column along with role_type will make the primary key. Its also a foreign key here, taken from person table
	 */
	public void setPersonId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.role.person_id</code>. This column along with role_type will make the primary key. Its also a foreign key here, taken from person table
	 */
	public Integer getPersonId() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<RoleType, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<RoleType, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<RoleType, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<RoleType> field1() {
		return Role.ROLE.ROLE_TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Role.ROLE.PERSON_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RoleType value1() {
		return getRoleType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getPersonId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RoleRecord value1(RoleType value) {
		setRoleType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RoleRecord value2(Integer value) {
		setPersonId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RoleRecord values(RoleType value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached RoleRecord
	 */
	public RoleRecord() {
		super(Role.ROLE);
	}

	/**
	 * Create a detached, initialised RoleRecord
	 */
	public RoleRecord(RoleType roleType, Integer personId) {
		super(Role.ROLE);

		setValue(0, roleType);
		setValue(1, personId);
	}
}
