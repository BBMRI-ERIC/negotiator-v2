/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.Flaggedquery;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table for queries that are flagged/bookmarked. bookmark options are starred, 
 * archived and ignored.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlaggedqueryRecord extends UpdatableRecordImpl<FlaggedqueryRecord> implements Record3<Integer, Integer, String> {

	private static final long serialVersionUID = -1877183211;

	/**
	 * Setter for <code>public.flaggedQuery.queryId</code>. This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public void setQueryid(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.flaggedQuery.queryId</code>. This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public Integer getQueryid() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.flaggedQuery.ownerId</code>. This column along with the id column will make the primary key. Its also a foreign key here, taken from owner(which itself takes it from person) table
	 */
	public void setOwnerid(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.flaggedQuery.ownerId</code>. This column along with the id column will make the primary key. Its also a foreign key here, taken from owner(which itself takes it from person) table
	 */
	public Integer getOwnerid() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>public.flaggedQuery.flag</code>. The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred
	 */
	public void setFlag(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.flaggedQuery.flag</code>. The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred
	 */
	public String getFlag() {
		return (String) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, String> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, String> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Flaggedquery.FLAGGEDQUERY.QUERYID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Flaggedquery.FLAGGEDQUERY.OWNERID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Flaggedquery.FLAGGEDQUERY.FLAG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getQueryid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getOwnerid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getFlag();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedqueryRecord value1(Integer value) {
		setQueryid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedqueryRecord value2(Integer value) {
		setOwnerid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedqueryRecord value3(String value) {
		setFlag(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedqueryRecord values(Integer value1, Integer value2, String value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached FlaggedqueryRecord
	 */
	public FlaggedqueryRecord() {
		super(Flaggedquery.FLAGGEDQUERY);
	}

	/**
	 * Create a detached, initialised FlaggedqueryRecord
	 */
	public FlaggedqueryRecord(Integer queryid, Integer ownerid, String flag) {
		super(Flaggedquery.FLAGGEDQUERY);

		setValue(0, queryid);
		setValue(1, ownerid);
		setValue(2, flag);
	}
}
