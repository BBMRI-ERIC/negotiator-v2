/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.JOOQ.tables;


import de.samply.bbmri.negotiator.JOOQ.Keys;
import de.samply.bbmri.negotiator.JOOQ.Public;
import de.samply.bbmri.negotiator.JOOQ.tables.records.ResearcherRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * researcher table - one of the child's of the person table 
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Researcher extends TableImpl<ResearcherRecord> {

	private static final long serialVersionUID = 1952107581;

	/**
	 * The reference instance of <code>public.researcher</code>
	 */
	public static final Researcher RESEARCHER = new Researcher();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ResearcherRecord> getRecordType() {
		return ResearcherRecord.class;
	}

	/**
	 * The column <code>public.researcher.id</code>. This id is the primary key of person table which is used here as both primary key and foreign key for the table
	 */
	public final TableField<ResearcherRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "This id is the primary key of person table which is used here as both primary key and foreign key for the table");

	/**
	 * Create a <code>public.researcher</code> table reference
	 */
	public Researcher() {
		this("researcher", null);
	}

	/**
	 * Create an aliased <code>public.researcher</code> table reference
	 */
	public Researcher(String alias) {
		this(alias, RESEARCHER);
	}

	private Researcher(String alias, Table<ResearcherRecord> aliased) {
		this(alias, aliased, null);
	}

	private Researcher(String alias, Table<ResearcherRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "researcher table - one of the child's of the person table ");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ResearcherRecord, Integer> getIdentity() {
		return Keys.IDENTITY_RESEARCHER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ResearcherRecord> getPrimaryKey() {
		return Keys.RESEARCHER_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ResearcherRecord>> getKeys() {
		return Arrays.<UniqueKey<ResearcherRecord>>asList(Keys.RESEARCHER_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ResearcherRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ResearcherRecord, ?>>asList(Keys.RESEARCHER__RESEARCHER_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Researcher as(String alias) {
		return new Researcher(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Researcher rename(String name) {
		return new Researcher(name, null);
	}
}
