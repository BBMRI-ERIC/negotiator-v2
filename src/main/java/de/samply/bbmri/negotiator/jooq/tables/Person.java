/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.PersonRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * person table which is parent of researcher and owner
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Person extends TableImpl<PersonRecord> {

	private static final long serialVersionUID = 611422127;

	/**
	 * The reference instance of <code>public.person</code>
	 */
	public static final Person PERSON = new Person();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PersonRecord> getRecordType() {
		return PersonRecord.class;
	}

	/**
	 * The column <code>public.person.id</code>. primary key
	 */
	public final TableField<PersonRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "primary key");

	/**
	 * The column <code>public.person.auth_subject</code>. authentication string that comes from the authentication service
	 */
	public final TableField<PersonRecord, String> AUTH_SUBJECT = createField("auth_subject", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "authentication string that comes from the authentication service");

	/**
	 * The column <code>public.person.auth_name</code>. the real name of the user, value comes from the authentication service
	 */
	public final TableField<PersonRecord, String> AUTH_NAME = createField("auth_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "the real name of the user, value comes from the authentication service");

	/**
	 * The column <code>public.person.auth_email</code>. the email of the user, value comes from the authentication service
	 */
	public final TableField<PersonRecord, String> AUTH_EMAIL = createField("auth_email", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "the email of the user, value comes from the authentication service");

	/**
	 * The column <code>public.person.person_image</code>. image/avatar of the person
	 */
	public final TableField<PersonRecord, byte[]> PERSON_IMAGE = createField("person_image", org.jooq.impl.SQLDataType.BLOB, this, "image/avatar of the person");

	/**
	 * The column <code>public.person.is_admin</code>. boolean if the person is an admin
	 */
	public final TableField<PersonRecord, Boolean> IS_ADMIN = createField("is_admin", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "boolean if the person is an admin");

	/**
	 * The column <code>public.person.organization</code>.
	 */
	public final TableField<PersonRecord, String> ORGANIZATION = createField("organization", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.person.synced_directory</code>.
	 */
	public final TableField<PersonRecord, Boolean> SYNCED_DIRECTORY = createField("synced_directory", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.person.is_moderator</code>. elevates the user to Moderator role
	 */
	public final TableField<PersonRecord, Boolean> IS_MODERATOR = createField("is_moderator", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "elevates the user to Moderator role");

	/**
	 * Create a <code>public.person</code> table reference
	 */
	public Person() {
		this("person", null);
	}

	/**
	 * Create an aliased <code>public.person</code> table reference
	 */
	public Person(String alias) {
		this(alias, PERSON);
	}

	private Person(String alias, Table<PersonRecord> aliased) {
		this(alias, aliased, null);
	}

	private Person(String alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "person table which is parent of researcher and owner");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PersonRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PERSON;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PersonRecord> getPrimaryKey() {
		return Keys.PERSON_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PersonRecord>> getKeys() {
		return Arrays.<UniqueKey<PersonRecord>>asList(Keys.PERSON_PKEY, Keys.PERSON_AUTH_SUBJECT_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Person as(String alias) {
		return new Person(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Person rename(String name) {
		return new Person(name, null);
	}
}
