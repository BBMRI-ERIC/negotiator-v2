/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables.records;


import de.samply.bbmri.negotiator.jooq.tables.FlaggedQuery;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table for queries that are flagged/bookmarked. bookmark options are starred, 
 * archived and ignored.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlaggedQueryRecord extends UpdatableRecordImpl<FlaggedQueryRecord> implements Record3<Integer, Integer, String> {

	private static final long serialVersionUID = -1749926274;

	/**
	 * Setter for <code>public.flagged_query.query_id</code>. This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public void setQueryId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.flagged_query.query_id</code>. This column along with ownerId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public Integer getQueryId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.flagged_query.person_id</code>. This column along with the id column will make the primary key. Its also a foreign key here, taken from person table
	 */
	public void setPersonId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.flagged_query.person_id</code>. This column along with the id column will make the primary key. Its also a foreign key here, taken from person table
	 */
	public Integer getPersonId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>public.flagged_query.flag</code>. The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred
	 */
	public void setFlag(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.flagged_query.flag</code>. The flag of the comment. One character letter. (A) archived, (I) ignored, (S) starred
	 */
	public String getFlag() {
		return (String) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, String> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, String> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return FlaggedQuery.FLAGGED_QUERY.QUERY_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return FlaggedQuery.FLAGGED_QUERY.PERSON_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return FlaggedQuery.FLAGGED_QUERY.FLAG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getQueryId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getPersonId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getFlag();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedQueryRecord value1(Integer value) {
		setQueryId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedQueryRecord value2(Integer value) {
		setPersonId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedQueryRecord value3(String value) {
		setFlag(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlaggedQueryRecord values(Integer value1, Integer value2, String value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached FlaggedQueryRecord
	 */
	public FlaggedQueryRecord() {
		super(FlaggedQuery.FLAGGED_QUERY);
	}

	/**
	 * Create a detached, initialised FlaggedQueryRecord
	 */
	public FlaggedQueryRecord(Integer queryId, Integer personId, String flag) {
		super(FlaggedQuery.FLAGGED_QUERY);

		setValue(0, queryId);
		setValue(1, personId);
		setValue(2, flag);
	}
}
