/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.JOOQ.tables;


import de.samply.bbmri.negotiator.JOOQ.Keys;
import de.samply.bbmri.negotiator.JOOQ.Public;
import de.samply.bbmri.negotiator.JOOQ.tables.records.TaggedqueryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table for queries that are tagged by names e.g. colonCancer,SkinCancer 
 * etc. Tag names need to be decided .
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Taggedquery extends TableImpl<TaggedqueryRecord> {

	private static final long serialVersionUID = -692151727;

	/**
	 * The reference instance of <code>public.taggedQuery</code>
	 */
	public static final Taggedquery TAGGEDQUERY = new Taggedquery();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TaggedqueryRecord> getRecordType() {
		return TaggedqueryRecord.class;
	}

	/**
	 * The column <code>public.taggedQuery.queryId</code>. This column along with tagId will make the primary key. Its also a foreign key here, taken from query table
	 */
	public final TableField<TaggedqueryRecord, Integer> QUERYID = createField("queryId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "This column along with tagId will make the primary key. Its also a foreign key here, taken from query table");

	/**
	 * The column <code>public.taggedQuery.tagId</code>. This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from "tag" table
	 */
	public final TableField<TaggedqueryRecord, Integer> TAGID = createField("tagId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "This column along with the Queryid column will make the primary key. Its also a foreign key here, taken from \"tag\" table");

	/**
	 * Create a <code>public.taggedQuery</code> table reference
	 */
	public Taggedquery() {
		this("taggedQuery", null);
	}

	/**
	 * Create an aliased <code>public.taggedQuery</code> table reference
	 */
	public Taggedquery(String alias) {
		this(alias, TAGGEDQUERY);
	}

	private Taggedquery(String alias, Table<TaggedqueryRecord> aliased) {
		this(alias, aliased, null);
	}

	private Taggedquery(String alias, Table<TaggedqueryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table for queries that are tagged by names e.g. colonCancer,SkinCancer etc. Tag names need to be decided .");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TaggedqueryRecord, Integer> getIdentity() {
		return Keys.IDENTITY_TAGGEDQUERY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TaggedqueryRecord> getPrimaryKey() {
		return Keys.TAGGEDQUERY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TaggedqueryRecord>> getKeys() {
		return Arrays.<UniqueKey<TaggedqueryRecord>>asList(Keys.TAGGEDQUERY_PKEY, Keys.TAGGEDQUERY_QUERYID_KEY, Keys.TAGGEDQUERY_TAGID_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<TaggedqueryRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<TaggedqueryRecord, ?>>asList(Keys.TAGGEDQUERY__TAGGEDQUERY_QUERYID_FKEY, Keys.TAGGEDQUERY__TAGGEDQUERY_TAGID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Taggedquery as(String alias) {
		return new Taggedquery(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Taggedquery rename(String name) {
		return new Taggedquery(name, null);
	}
}
