/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.CollectionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table to store collections from the directory
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Collection extends TableImpl<CollectionRecord> {

	private static final long serialVersionUID = -655490908;

	/**
	 * The reference instance of <code>public.collection</code>
	 */
	public static final Collection COLLECTION = new Collection();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CollectionRecord> getRecordType() {
		return CollectionRecord.class;
	}

	/**
	 * The column <code>public.collection.id</code>. primary key
	 */
	public final TableField<CollectionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "primary key");

	/**
	 * The column <code>public.collection.name</code>. The collection name
	 */
	public final TableField<CollectionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "The collection name");

	/**
	 * The column <code>public.collection.directory_id</code>. The directory ID, e.g. eu_bbmri_eric_collections:NL45:blood_collection
	 */
	public final TableField<CollectionRecord, String> DIRECTORY_ID = createField("directory_id", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directory ID, e.g. eu_bbmri_eric_collections:NL45:blood_collection");

	/**
	 * The column <code>public.collection.biobank_id</code>. The Biobank ID this collection belongs to
	 */
	public final TableField<CollectionRecord, Integer> BIOBANK_ID = createField("biobank_id", org.jooq.impl.SQLDataType.INTEGER, this, "The Biobank ID this collection belongs to");

	/**
	 * The column <code>public.collection.list_of_directories_id</code>. The directorie Id where the biobank belongs to
	 */
	public final TableField<CollectionRecord, Integer> LIST_OF_DIRECTORIES_ID = createField("list_of_directories_id", org.jooq.impl.SQLDataType.INTEGER, this, "The directorie Id where the biobank belongs to");

	/**
	 * Create a <code>public.collection</code> table reference
	 */
	public Collection() {
		this("collection", null);
	}

	/**
	 * Create an aliased <code>public.collection</code> table reference
	 */
	public Collection(String alias) {
		this(alias, COLLECTION);
	}

	private Collection(String alias, Table<CollectionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Collection(String alias, Table<CollectionRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table to store collections from the directory");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CollectionRecord, Integer> getIdentity() {
		return Keys.IDENTITY_COLLECTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CollectionRecord> getPrimaryKey() {
		return Keys.COLLECTION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CollectionRecord>> getKeys() {
		return Arrays.<UniqueKey<CollectionRecord>>asList(Keys.COLLECTION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CollectionRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CollectionRecord, ?>>asList(Keys.COLLECTION__COLLECTION_BIOBANK_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Collection as(String alias) {
		return new Collection(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Collection rename(String name) {
		return new Collection(name, null);
	}
}
